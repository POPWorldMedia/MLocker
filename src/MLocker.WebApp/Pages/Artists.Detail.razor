@using MLocker.Core.Models
@using MLocker.WebApp.Services
@using Microsoft.AspNetCore.WebUtilities
@using MLocker.Core.Services
@inject IPlayerService PlayerService
@inject IMusicService MusicService
@inject IFileParsingService FileParsingService
@inject IPlaylistTransformer PlaylistTransformer

@if (_isAlbumMode)
{
	<p @onclick="@BackToAllAlbums"><span class="backButton"></span> all @_currentAlbum.AlbumArtist albums</p>
	<h2>
		<span id="playAlbumButton" @onclick="PlayAlbum" title="Play album"></span>
		<span id="playShuffleButton" @onclick="PlayShuffle" title="Shuffle album"></span>
		@_currentAlbum.AlbumArtist - @_currentAlbum.Title
	</h2>
	<SongListSummary SongList="_songList"/>
}
else
{
	<p @onclick="@(() => OnClick.InvokeAsync())"><span class="backButton"></span> all artists</p>
	<h2>@CurrentArtist</h2>
	<h3>Albums</h3>

	<table class="table table-hover">
		<thead>
			<tr>
				<th></th>
				<th>Album</th>
				<th>Artist</th>
			</tr>
		</thead>
		<tbody>
			<Virtualize Context="item" Items="@_albums" TItem="Album">
				<tr>
					<td class="songImageCell" @onclick="@(() => LoadAlbum(item))">
						@if (item.FirstSong != null)
						{
							<img src="@(QueryHelpers.AddQueryString("/GetImage", "fileName", FileParsingService.ParseImageFileName(item.FirstSong)))" class="songImage" />
						}
						else
						{
							<div class="coverPlaceholder songImage"> </div>
						}
					</td>
					<td @onclick="@(() => LoadAlbum(item))" class="clickyText">@item.Title</td>
					<td class="songSecondaryCell">@item.AlbumArtist</td>
				</tr>
			</Virtualize>
		</tbody>
	</table>

	<h3>
		<span id="playShuffleButton" @onclick="PlayShuffle"></span>
		Songs
	</h3>
}

@if (_songList != null && _songList.Count > 0)
{
	<SongList Songs="_songList" WillClearQueueOnPlay="true" WillQueueListOnPlay="true" ShowSearch="_showSearch" ShowTrack="_isAlbumMode" />
}

@code {
	[Parameter]
	public string CurrentArtist { get; set; }
	[Parameter]
	public EventCallback OnClick { get; set; }

	List<Song> _songList;
	List<Album> _albums;
	List<Song> _songs;
	bool _showSearch = true;
	bool _isAlbumMode = false;
	Album _currentAlbum;

	protected override async Task OnParametersSetAsync()
	{
		var (albums, songs) = await MusicService.GetArtistDetail(CurrentArtist);
		_albums = albums;
		_songs = songs;
		_songList = _songs;
	}

	public async Task LoadAlbum(Album album)
	{
		_currentAlbum = album;
		var songs = await MusicService.GetAlbum(album);
		_songList = songs;
		_showSearch = false;
		_isAlbumMode = true;
		StateHasChanged();
	}

	public void BackToAllAlbums()
	{
		_showSearch = true;
		_songList = _songs;
		_isAlbumMode = false;
		StateHasChanged();
	}

	private void PlayAlbum()
	{
		PlayerService.PlaySong(_songList[0], _songList, 0);
		StateHasChanged();
	}

	private void PlayShuffle()
	{
		if (_songList.Any())
		{
			var shuffled = PlaylistTransformer.Shuffle(_songList);
			PlayerService.PlaySong(shuffled[0], shuffled, 0);
		}
	}
}