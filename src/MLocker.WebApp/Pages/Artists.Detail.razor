@using MLocker.Core.Models
@using MLocker.WebApp.Services
@using Microsoft.AspNetCore.WebUtilities
@using MLocker.Core.Services
@inject IPlayerService PlayerService
@inject IMusicService MusicService
@inject IFileParsingService FileParsingService
@inject IPlaylistTransformer PlaylistTransformer

@if (_isAlbumMode)
{
	<p @onclick="@BackToAllAlbums"><span class="backButton"></span> all @_currentAlbum.AlbumArtist albums</p>
	<div>
		<span id="playAlbumButton" @onclick="PlayAlbum" title="Play album"></span>
		<span class="playShuffleButton" @onclick="PlayShuffle" title="Shuffle album"></span>
		<SongListCacheButton SongList="_songList" IsAlbumMode="true" />
		<div class="songTitle text-truncate"><span class="text-truncate d-block">@_currentAlbum.AlbumArtist - @_currentAlbum.Title</span></div>
		<SongListSummary SongList="_songList" />
	</div>
}
else
{
	<p @onclick="@(() => OnClick.InvokeAsync())"><span class="backButton"></span> all artists</p>
	<h2>@CurrentArtist</h2>
	<h3>Albums</h3>
	
	<div class="albumList">
		<div class="row font-weight-bold header py-2 flex-nowrap">
			<div class="col songImageCell"></div>
			<div class="col">Album</div>
		</div>
		<Virtualize Context="item" Items="@_albums" TItem="Album">
			<div class="row py-2 flex-nowrap">
				<div class="col songImageCell" @onclick="@(() => LoadAlbum(item))">
					@if (item.FirstSong != null)
					{
						<img src="@(QueryHelpers.AddQueryString("/GetImage", "fileName", FileParsingService.ParseImageFileName(item.FirstSong)))" class="songImage" />
					}
					else
					{
						<div class="coverPlaceholder songImage"> </div>
					}
				</div>
				<div @onclick="@(() => LoadAlbum(item))" class="col align-self-center clickyText wrapTruncate">
					<div class="songTitle text-truncate"><span class="text-truncate d-block">@item.Title</span></div>
				</div>
			</div>
		</Virtualize>
	</div>

	<h3 class="mt-3">
		<span class="playShuffleButton shuffleAllButton" @onclick="PlayShuffle"></span>
		Songs
	</h3>
}

@if (_songList != null && _songList.Count > 0)
{
	<SongList Songs="_songList" WillClearQueueOnPlay="true" WillQueueListOnPlay="true" ShowSearch="_showSearch" ShowTrack="_isAlbumMode" />
}

@code {
	[Parameter]
	public string CurrentArtist { get; set; }
	[Parameter]
	public EventCallback OnClick { get; set; }

	List<Song> _songList;
	List<Album> _albums;
	List<Song> _songs;
	bool _showSearch = true;
	bool _isAlbumMode = false;
	Album _currentAlbum;

	protected override async Task OnParametersSetAsync()
	{
		var (albums, songs) = await MusicService.GetArtistDetail(CurrentArtist);
		_albums = albums;
		_songs = songs;
		_songList = _songs;
	}

	public void LoadAlbum(Album album)
	{
		_currentAlbum = album;
		_songList = album.Songs;
		_showSearch = false;
		_isAlbumMode = true;
		StateHasChanged();
	}

	public void BackToAllAlbums()
	{
		_showSearch = true;
		_songList = _songs;
		_isAlbumMode = false;
		StateHasChanged();
	}

	private void PlayAlbum()
	{
		PlayerService.PlaySong(_songList[0], _songList, 0);
		StateHasChanged();
	}

	private void PlayShuffle()
	{
		if (_songList.Any())
		{
			var shuffled = PlaylistTransformer.Shuffle(_songList);
			PlayerService.PlaySong(shuffled[0], shuffled, 0);
		}
	}
}