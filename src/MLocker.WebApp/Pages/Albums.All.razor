@using Microsoft.AspNetCore.WebUtilities
@using MLocker.Core.Models
@using MLocker.Core.Services
@using MLocker.WebApp.Services
@using System.Timers
@inject IFileParsingService FileParsingService
@inject IPlayerService PlayerService

@if (_filteredList != null)
{
	<div class="input-group mb-4">
		<span class="input-group-text"><span class="searchIcon"></span></span>
		<input type="text" class="form-control" placeholder="Search albums" aria-label="Search songs" @bind-value="_searchTerm" @bind-value:event="oninput" @onkeyup="HandleKeyUp">
		<span class="input-group-text" @onclick="ClearSearch"><button type="button" class="btn-close" aria-label="Close"></button></span>
	</div>

	<table class="table table-hover">
		<thead>
			<tr>
				<th></th>
				<th>Album</th>
				<th>Artist</th>
			</tr>
		</thead>
		<tbody>
			<Virtualize Context="item" Items="@_filteredList" TItem="Album">
				<tr>
					<td class="songImageCell" @onclick="@(() => OnClick.InvokeAsync(item))">
						@if (item.FirstSong != null)
						{
							<img src="@(QueryHelpers.AddQueryString("/GetImage", "fileName", FileParsingService.ParseImageFileName(item.FirstSong)))" class="songImage" />
						}
						else
						{
							<div class="coverPlaceholder songImage"> </div>
						}
					</td>
					<td @onclick="@(() => OnClick.InvokeAsync(item))" class="clickyText">@item.Title</td>
					<td class="songSecondaryCell">@item.AlbumArtist</td>
				</tr>
			</Virtualize>
		</tbody>
	</table>
}

@code
{
	[CascadingParameter]
	protected List<Album> AlbumList { get; set; }
	[Parameter]
	public EventCallback<Album> OnClick { get; set; }

	private string _searchTerm = string.Empty;
	private List<Album> _filteredList;
	private Timer _timer;

	protected override void OnInitialized()
	{
		_timer = new Timer(350) { AutoReset = false };
		_timer.Elapsed += OnTimerFinish;
	}

	protected override async Task OnParametersSetAsync()
	{
		await InvokeAsync(RecalculateList);
	}

	void HandleKeyUp(KeyboardEventArgs e)
	{
		_timer.Stop();
		_timer.Start();
	}

	private void OnTimerFinish(Object source, ElapsedEventArgs e)
	{
		InvokeAsync(RecalculateList);
	}

	private void RecalculateList()
	{
		var term = _searchTerm.Trim();
		if (string.IsNullOrEmpty(term))
			_filteredList = AlbumList;
		else
		{
			var filteredList = AlbumList.Where(x => x.Title != null && x.Title.Contains(term, StringComparison.InvariantCultureIgnoreCase)
													|| x.AlbumArtist != null && x.AlbumArtist.Contains(term, StringComparison.InvariantCultureIgnoreCase)).ToList();
			_filteredList = filteredList;
		}
		StateHasChanged();
	}

	private void ClearSearch()
	{
		_searchTerm = string.Empty;
		RecalculateList();
	}
}
