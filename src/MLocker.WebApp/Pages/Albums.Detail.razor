@using MLocker.Core.Models
@using MLocker.Core.Services
@using MLocker.WebApp.Repositories
@using MLocker.WebApp.Services
@inject IMusicService MusicService
@inject IPlayerService PlayerService
@inject IPlaylistTransformer PlaylistTransformer

<h2>
	<span id="playAlbumButton" @onclick="PlayAlbum" title="Play album"></span>
	<span id="playShuffleButton" @onclick="PlayShuffle" title="Shuffle album"></span>
	@Album.AlbumArtist - @Album.Title
</h2>

<SongListSummary SongList="_songList" />

<SongList Songs="_songList" WillClearQueueOnPlay="true" WillQueueListOnPlay="true" ShowSearch="false" ShowTrack="true" />

@code {
	[CascadingParameter]
	protected Album Album { get; set; }

	List<Song> _songList;

	protected override async Task OnInitializedAsync()
	{
		var songs = await MusicService.GetAlbum(Album);
		_songList = songs;
	}

	private void PlayAlbum()
	{
		PlayerService.PlaySong(_songList[0], _songList, 0);
	}

	private void PlayShuffle()
	{
		if (_songList.Any())
		{
			var shuffled = PlaylistTransformer.Shuffle(_songList);
			PlayerService.PlaySong(shuffled[0], shuffled, 0);
		}
	}
}
