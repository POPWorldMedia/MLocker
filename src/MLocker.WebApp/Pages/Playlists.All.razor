@using MLocker.WebApp.Services
@using MLocker.Core.Models
@using System.Timers
@inject IPlaylistService PlaylistService

<div class="my-3 text-end">
	<button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#addModal" title="New playlist">
		<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-plus" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
			<path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
		</svg>
	</button>
</div>

<div class="modal fade" id="addModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">New playlist</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="mb-3">
					<input type="text" class="form-control" @bind-value="_newPlaylistName" placeholder="Playlist name">
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-dark" data-bs-dismiss="modal" @onclick="SaveNewPlaylist">Create</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-body">
				<div class="mb-3">
					Delete playlist "@_playlistForDelete?.Title"?
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-dark" data-bs-dismiss="modal" @onclick="Delete">Delete</button>
			</div>
		</div>
	</div>
</div>

@if (PlaylistList != null && PlaylistList.Count > 0)
{
	<div class="input-group mb-4">
		<span class="input-group-text"><span class="searchIcon"></span></span>
		<input type="text" class="form-control" placeholder="Search playlists" aria-label="Search songs" @bind-value="_searchTerm" @bind-value:event="oninput" @onkeyup="HandleKeyUp">
		<span class="input-group-text" @onclick="ClearSearch"><button type="button" class="btn-close" aria-label="Close"></button></span>
	</div>

	<div class="songList">
		<div class="row py-2 flex-nowrap fw-bold header">
			<div class="col">Playlist</div>
			<div class="col songLengthPlayCell text-end">Songs</div>
			<div class="col songLengthPlayCell"></div>
		</div>
		<Virtualize Context="item" Items="@_filteredList" TItem="Playlist">
			<div class="row py-2 flex-nowrap">
				<div class="col clickyText" @onclick="@(() => OnClick.InvokeAsync(item))">@item.Title</div>
				<div class="col songLengthPlayCell text-end">@item.Songs.Count</div>
				<div class="col songLengthPlayCell text-end"><span class="trashCan" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="(() => SetupDelete(item))"></span></div>
			</div>
		</Virtualize>
	</div>
}

@code
{
	[Parameter]
	public List<Playlist> PlaylistList { get; set; }
	[Parameter]
	public EventCallback<Playlist> OnClick { get; set; }
	[Parameter]
	public EventCallback OnNew { get; set; }

	private string _newPlaylistName;
	private string _searchTerm = string.Empty;
	private List<Playlist> _filteredList;
	private Timer _timer;
	private Playlist _playlistForDelete;

	protected override void OnInitialized()
	{
		_timer = new Timer(350) { AutoReset = false };
		_timer.Elapsed += OnTimerFinish;
	}

	protected override async Task OnParametersSetAsync()
	{
		await InvokeAsync(RecalculateList);
	}

	void HandleKeyUp(KeyboardEventArgs e)
	{
		_timer.Stop();
		_timer.Start();
	}

	private void OnTimerFinish(Object source, ElapsedEventArgs e)
	{
		RecalculateList();
	}

	private void RecalculateList()
	{
		var term = _searchTerm.Trim();
		if (string.IsNullOrEmpty(_searchTerm))
			_filteredList = PlaylistList;
		else
		{
			_filteredList = PlaylistList.Where(x => x.Title.Contains(term, StringComparison.InvariantCultureIgnoreCase)).ToList();
		}
		StateHasChanged();
	}

	private void ClearSearch()
	{
		_searchTerm = string.Empty;
		RecalculateList();
	}

	private async Task SaveNewPlaylist()
	{
		if (string.IsNullOrEmpty(_newPlaylistName))
			return;
		await PlaylistService.CreateNewPlaylistDefinition(_newPlaylistName);
		_newPlaylistName = string.Empty;
		await OnNew.InvokeAsync();
	}

	private void SetupDelete(Playlist playlist)
	{
		_playlistForDelete = playlist;
	}

	private async Task Delete()
	{
		await PlaylistService.DeletePlaylist(_playlistForDelete);
	}
}