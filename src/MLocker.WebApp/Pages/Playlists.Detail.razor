@using MLocker.Core.Models
@using MLocker.Core.Services
@using MLocker.WebApp.Services
@using System.Timers
@inject IPlayerService PlayerService
@inject IPlaylistTransformer PlaylistTransformer
@inject IPlaylistService PlaylistService

<div class="my-3" style="text-align: right;">
	<button type="button" class="btn btn-dark" data-toggle="modal" data-target="#editModal" title="Edit playlist" id="editButton">
		<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-pencil-square" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
			<path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
			<path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
		</svg>
	</button>
</div>

<div>
	<span id="playAlbumButton" @onclick="PlayPlaylist" title="Play playlist"></span>
	<span class="playShuffleButton" @onclick="PlayShuffle" title="Shuffle playlist"></span>
	<AddListToQueueButton SongList="_songList"/>
	<SongListCacheButton SongList="_songList" IsAlbumMode="false" />
	<div class="songTitle text-truncate"><span class="text-truncate d-block">@Playlist.Title</span></div>
	<SongListSummary SongList="_songList" />
</div>

<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editButton" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">Edit playlist</h5>
				<button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<input class="form-control my-2" type="text" placeholder="Playlist name required" @bind-value="Playlist.Title" @bind-value:event="oninput" @onkeyup="HandleKeyUp" />
				<ul class="list-group list-group-flush" ondragover="event.preventDefault();">
					@foreach (var item in Playlist.Songs)
					{
						<li class="list-group-item draggable" draggable="true" @ondrop="@(() => OnDrop(item))" @ondrag="@(() => OnDrag(item))">
							<span class="gripper"></span>
							@item.Title, @(item.Artist ?? item.AlbumArtist)
							<span class="trashCan" @onclick="(() => Delete(item))"></span>
						</li>
					}
				</ul>
			</div>
		</div>
	</div>
</div>

<SongList Songs="_songList" WillClearQueueOnPlay="true" WillQueueListOnPlay="true" ShowSearch="false" ShowTrack="false" />

@code {
	[CascadingParameter]
	protected Playlist Playlist { get; set; }

	List<Song> _songList;
	int _currentIndex;
	private Timer _timer;

	protected override void OnInitialized()
	{
		_songList = Playlist.Songs;
		_timer = new Timer(500) { AutoReset = false };
		_timer.Elapsed += OnTimerFinish;
	}

	private void PlayPlaylist()
	{
		if (Playlist.Songs.Any())
			PlayerService.PlaySong(_songList[0], _songList, 0);
	}

	private void PlayShuffle()
	{
		if (Playlist.Songs.Any())
		{
			var shuffled = PlaylistTransformer.Shuffle(_songList);
			PlayerService.PlaySong(shuffled[0], shuffled, 0);
		}
	}

	void OnDrag(Song item)
	{
		_currentIndex = Playlist.Songs.FindIndex(x => x.FileID == item.FileID);
	}

	private void OnDrop(Song item)
	{
		var index = Playlist.Songs.FindIndex(x => x.FileID == item.FileID);
		var current = Playlist.Songs[_currentIndex];
		Playlist.Songs.RemoveAt(_currentIndex);
		Playlist.Songs.Insert(index, current);
		_currentIndex = index;
		_songList = Playlist.Songs;
		StateHasChanged();
		PlaylistService.UpdatePlaylist(Playlist);
	}

	private void OnTimerFinish(Object source, ElapsedEventArgs e)
	{
		PlaylistService.UpdatePlaylist(Playlist);
	}

	void HandleKeyUp(KeyboardEventArgs e)
	{
		_timer.Stop();
		_timer.Start();
	}

	private void Delete(Song item)
	{
		Playlist.Songs.Remove(item);
		_songList = Playlist.Songs;
		StateHasChanged();
		PlaylistService.UpdatePlaylist(Playlist);
	}
}