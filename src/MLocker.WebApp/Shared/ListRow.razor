@using Microsoft.AspNetCore.WebUtilities
@using MLocker.Core.Services
@using MLocker.Core.Models
@using MLocker.WebApp.Services
@inject IFileParsingService FileParsingService
@inject IPlayerService PlayerService
@inject IJSRuntime JsRuntime
@inject ISongContextStateService SongContextStateService
@implements IDisposable

<tr>
	<td class="songImageCell">
		@if (Song.Value.PictureMimeType != null)
		{
			<div @onclick="@(() => PlaySong(Song))" style="background-image: url(@(QueryHelpers.AddQueryString(ApiPaths.GetImage, "fileName", FileParsingService.ParseImageFileName(Song.Value))))" class="songImage playButton @_nowPlayingClass"></div>
		}
		else
		{
			<div @onclick="@(() => PlaySong(Song))" class="coverPlaceholder songImage playButton @_nowPlayingClass"> </div>
		}
	</td>
	<td @onclick="@(() => PlaySong(Song))" class="clickyText">@Song.Value.Title</td>
	<td>
		<div @onclick="OpenContext"><div id="context@(Song.Value.FileID)" class="contextButton"></div></div>
	</td>
	<td>@Song.Value.Artist</td>
	<td>@Song.Value.Album</td>
	<td>@(new TimeSpan(Song.Value.Ticks).ToString(@"m\:ss"))</td>
	<td>@Song.Value.PlayCount</td>
</tr>

@code {

	[Parameter]
	public KeyValuePair<int, Song> Song { get; set; }
	[Parameter]
	public Dictionary<int, Song> ListContext { get; set; }
	[Parameter]
	public bool WillRequeue { get; set; }

	private string _nowPlayingClass;

	protected override void OnInitialized()
	{
		PlayerService.OnChange += RecalcNowPlaying;
		RecalcNowPlaying();
	}

	public void PlaySong(KeyValuePair<int, Song> song)
	{
		if (WillRequeue)
		{
			if (ListContext == null)
				ListContext = new Dictionary<int, Song> {{0, song.Value}};
			PlayerService.PlaySong(song.Value, ListContext, song.Key);
		}
		else
			PlayerService.SkipToSong(song.Key);
	}

	private void RecalcNowPlaying()
	{
		_nowPlayingClass = Song.Value.FileID == PlayerService.CurrentSong?.FileID ? "eq" : string.Empty;
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		PlayerService.OnChange -= RecalcNowPlaying;
	}
    
	private void OpenContext()
	{
		SongContextStateService.Song = Song.Value;
		JsRuntime.InvokeVoidAsync("OpenSongContext", Song.Value.FileID);
	}
}