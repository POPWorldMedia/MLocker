@using Microsoft.AspNetCore.WebUtilities
@using MLocker.Core.Services
@using MLocker.Core.Models
@using MLocker.WebApp.Services
@inject IFileParsingService FileParsingService
@inject IPlayerService PlayerService
@inject IJSRuntime JsRuntime
@inject ISongContextStateService SongContextStateService
@implements IDisposable

<tr>
	@if (ShowTrack)
	{
		<td class="songLengthPlayCell">@Song.Track</td>
	}
	<td class="songImageCell">
		@if (Song.PictureMimeType != null)
		{
			<div @onclick="@(() => PlaySong(Song))" style="background-image: url('@(QueryHelpers.AddQueryString(ApiPaths.GetImage, "fileName", FileParsingService.ParseImageFileName(Song)))')" class="songImage playButton @_nowPlayingClass"></div>
		}
		else
		{
			<div @onclick="@(() => PlaySong(Song))" class="coverPlaceholder songImage playButton @_nowPlayingClass"> </div>
		}
	</td>
	<td>@Song.Title</td>
	<td class="songLengthPlayCell">
		<div class="text-right" @onclick="OpenContext"><div id="@_contextMenuID" class="contextButton"></div></div>
	</td>
	<td class="songSecondaryCell"><span class="text-truncate">@Song.Artist</span></td>
	<td class="songSecondaryCell"><span class="text-truncate">@Song.Album</span></td>
	<td class="songLengthPlayCell">@(new TimeSpan(Song.Ticks).ToString(@"m\:ss"))</td>
	<td class="songLengthPlayCell">@Song.PlayCount</td>
</tr>

@code {

	[Parameter]
	public Song Song { get; set; }
	[Parameter]
	public List<Song> ListContext { get; set; }
	[Parameter]
	public bool WillClearQueueOnPlay { get; set; }
	[Parameter]
	public bool ShowTrack { get; set; }

	private string _nowPlayingClass;
	private string _contextMenuID;

	protected override void OnInitialized()
	{
		_contextMenuID = "songRow" + Guid.NewGuid().ToString("N").Substring(8,8);
		PlayerService.OnChange += RecalcNowPlaying;
	}

	protected override void OnParametersSet()
	{
		RecalcNowPlaying();
	}

	public void PlaySong(Song song)
	{
		if (WillClearQueueOnPlay)
		{
			if (ListContext == null)
				ListContext = new List<Song> {song};
			var index = ListContext.IndexOf(song);
			PlayerService.PlaySong(song, ListContext, index);
		}
		else
		{
			var index = ListContext.IndexOf(song);
			PlayerService.SkipToSong(index);
		}
	}

	private void RecalcNowPlaying()
	{
		_nowPlayingClass = Song.FileID == PlayerService.CurrentSong?.FileID ? "eq" : string.Empty;
		StateHasChanged();
	}

	public void Dispose()
	{
		PlayerService.OnChange -= RecalcNowPlaying;
	}

	private void OpenContext()
	{
		SongContextStateService.ContextMenuID = _contextMenuID;
		SongContextStateService.Song = Song;
		JsRuntime.InvokeVoidAsync("OpenSongContext", _contextMenuID);
	}
}