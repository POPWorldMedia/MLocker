@using Microsoft.AspNetCore.WebUtilities
@using MLocker.Core.Services
@using MLocker.Core.Models
@using MLocker.WebApp.Services
@inject IFileNameParsingService FileNameParsingService
@inject IPlayerService PlayerService
@inject IJSRuntime JsRuntime
@inject ISongContextStateService SongContextStateService
@implements IDisposable

<div class="row py-2 flex-nowrap">
	@if (ShowTrack)
	{
		<div class="col smallCell">@Song.Track</div>
	}
	<div class="col songImageCell">
		@if (Song.PictureMimeType != null)
		{
			<div @onclick="@(() => PlaySong(Song))" style="background-image: url('@(QueryHelpers.AddQueryString(ApiPaths.GetImage, "fileName", FileNameParsingService.ParseImageFileName(Song)))')" class="songImage playButton @_nowPlayingClass"></div>
		}
		else
		{
			<div @onclick="@(() => PlaySong(Song))" class="coverPlaceholder songImage playButton @_nowPlayingClass"> </div>
		}
	</div>
	<div class="col align-self-center wrapTruncate">
		<div class="songTitle text-truncate">@Song.Title</div>
		<div class="songSubTitle text-truncate d-md-block d-lg-none">
			@Song.Artist ● @Song.Album ● @(new TimeSpan(Song.Ticks).ToString(@"m\:ss"))
		</div>
	</div>
	<div class="col align-self-center smallCell">
		<div class="text-end" @onclick="OpenContext"><div id="@_contextMenuID" class="contextButton"></div></div>
	</div>
	<div class="col align-self-center songSecondaryCell d-none d-lg-block col-md-2 wrapTruncate"><span class="text-truncate d-block">@Song.Artist</span></div>
	<div class="col align-self-center songSecondaryCell d-none d-lg-block col-md-2 wrapTruncate"><span class="text-truncate d-block">@Song.Album</span></div>
	<div class="col align-self-center songLengthPlayCell d-none d-lg-block col-md-2">@(new TimeSpan(Song.Ticks).ToString(@"m\:ss"))</div>
	<div class="col align-self-center songLengthPlayCell d-none d-lg-block col-md-2">@Song.PlayCount</div>
</div>

@code {

	[Parameter]
	public Song Song { get; set; }
	[Parameter]
	public List<Song> ListContext { get; set; }
	[Parameter]
	public bool WillClearQueueOnPlay { get; set; }
	[Parameter]
	public bool ShowTrack { get; set; }

	private string _nowPlayingClass;
	private string _contextMenuID;

	protected override void OnInitialized()
	{
		_contextMenuID = "songRow" + Guid.NewGuid().ToString("N").Substring(8,8);
		PlayerService.OnChange += RecalcNowPlaying;
	}

	protected override void OnParametersSet()
	{
		RecalcNowPlaying();
	}

	public void PlaySong(Song song)
	{
		if (WillClearQueueOnPlay)
		{
			if (ListContext == null)
				ListContext = new List<Song> {song};
			var index = ListContext.IndexOf(song);
			PlayerService.PlaySong(song, ListContext, index);
		}
		else
		{
			var index = ListContext.IndexOf(song);
			PlayerService.SkipToSong(index);
		}
	}

	private void RecalcNowPlaying()
	{
		_nowPlayingClass = Song.FileID == PlayerService.CurrentSong?.FileID ? "eq" : string.Empty;
		StateHasChanged();
	}

	public void Dispose()
	{
		PlayerService.OnChange -= RecalcNowPlaying;
	}

	private void OpenContext()
	{
		SongContextStateService.ContextMenuID = _contextMenuID;
		SongContextStateService.Song = Song;
		JsRuntime.InvokeVoidAsync("OpenSongContext", _contextMenuID);
	}
}