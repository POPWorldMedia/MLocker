@using Microsoft.AspNetCore.WebUtilities
@using MLocker.Core.Models
@using MLocker.Core.Services
@using MLocker.WebApp.Services
@inject IFileParsingService FileParsingService
@inject IJSRuntime JsRuntime
@inject IPlayerService PlayerService
@inject IMusicService MusicService

<div class="container" id="playerInfo">
    @if (PlayerService.CurrentSong != null)
    {
        if (PlayerService.CurrentSong.PictureMimeType != null)
        {
            <img src="@(QueryHelpers.AddQueryString(ApiPaths.GetImage, "fileName", FileParsingService.ParseImageFileName(PlayerService.CurrentSong)))" class="nowPlayingImage @_imageClass" @onclick="@(ShrinkToggle)" />
        }
        else
        {
	        <div class="coverPlaceholder nowPlayingImage @_imageClass" @onclick="@(ShrinkToggle)"> </div>
        }
        <div class="songDetails @_titleClass">
            <h3>@PlayerService.CurrentSong.Title</h3>
            <h4>@PlayerService.CurrentSong.Artist - @PlayerService.CurrentSong.Album</h4>
        </div>
    }
</div>
<div class="container">
	<div class="row">
		<div class="d-none d-md-block col-md-1"><span id="queueButton" class="playerButton" data-toggle="collapse" data-target="#queueList" aria-expanded="true" aria-controls="queueList" title="Show queue"></span></div>
		<div class="d-none d-md-block col-md-2 text-right"><span class="@_previousClass playerButton" @onclick="PlayPrevious"></span></div>
		<div class="col-md-6 text-center"><audio id="player" src="@_source" controls></audio></div>
		<div class="d-none d-md-block col-md-2"><span class="@_nextClass playerButton" @onclick="PlayNext"></span></div>
		<div class="d-none d-md-block col-md-1"></div>
	</div>
	<div class="row d-sm-block d-md-none">
		<div class="col"><span id="queueButton" class="playerButton" data-toggle="collapse" data-target="#queueList" aria-expanded="true" aria-controls="queueList" title="Show queue"></span></div>
		<div class="col text-right"><span class="@_previousClass playerButton" @onclick="PlayPrevious"></span></div>
		<div class="col"><span class="@_nextClass playerButton" @onclick="PlayNext"></span></div>
		<div class="col"></div>
	</div>
</div>
<div id="queueList" class="container collapse" aria-labelledby="queueButton" data-parent="#queueButton">
	@if (PlayerService.Queue != null && PlayerService.Queue.Count > 0)
	{
		<SongList Songs="_songList" WillClearQueueOnPlay="false" WillQueueListOnPlay="false" ShowSearch="false" />
	}
	else
	{
		<div class="alert" role="alert">
			The queue is empty
		</div>
	}
</div>
<hr />

@code
{
	private List<Song> _songList;
	string _source;
	string _imageClass;
	string _titleClass;
	string _nextClass;
	string _previousClass;
	bool _isBig = false;

	protected override void OnInitialized()
	{
		_imageClass = "";
		PlayerService.OnChange += () =>
		{
			if (PlayerService.CurrentSong == null)
				_source = string.Empty;
			if (PlayerService.CurrentSong != null)
			{
				_source = MusicService.GetSongUrl(PlayerService.CurrentSong.FileID);
				MusicService.IncrementPlayCount(PlayerService.CurrentSong.FileID);
			}
			_previousClass = PlayerService.CurrentSong == null
			                 || PlayerService.Queue.Count <= 1
			                 || PlayerService.QueueIndex == 0
				? "previousButtonOff" : "previousButton";
			_nextClass = PlayerService.CurrentSong == null
			             || PlayerService.Queue.Count <= 1
			             || PlayerService.QueueIndex >= PlayerService.Queue.Count - 1
				? "nextButtonOff" : "nextButton";
			_songList = PlayerService.Queue;
			InvokeAsync(StateHasChanged);
		};

		_updateAction = UpdateMessage;
		_nextSongAction = PlayNext;
		_previousSongAction = PlayPrevious;
	}

	private void ShrinkToggle()
	{
		if (_isBig)
		{
			_imageClass = "";
			_titleClass = "";
		}
		else
		{
			_imageClass = "nowPlayingShrink";
			_titleClass = "songDetailsShrink";
		}
		_isBig = !_isBig;
	}

	private void PlayNext()
	{
		PlayerService.PlayNextSong();
	}

	private void PlayPrevious()
	{
		PlayerService.PlayPreviousSong();
	}

	private static Action _updateAction;
	private static Action _nextSongAction;
	private static Action _previousSongAction;

	private void UpdateMessage()
	{
		PlayerService.PlayNextSong();
	}

	[JSInvokable]
	public static void SongEnded()
	{
		_updateAction.Invoke();
	}

	[JSInvokable]
	public static void SongNext()
	{
		_nextSongAction.Invoke();
	}

	[JSInvokable]
	public static void SongPrevious()
	{
		_previousSongAction.Invoke();
	}
}
