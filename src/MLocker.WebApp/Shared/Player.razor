@using Microsoft.AspNetCore.WebUtilities
@using MLocker.Core.Models
@using MLocker.Core.Services
@using MLocker.WebApp.Services
@inject IFileParsingService FileParsingService
@inject IPlayerService PlayerService
@inject IMusicService MusicService
@inject IPlaylistService PlaylistService

<div id="playerInfo">
	@if (PlayerService.CurrentSong != null)
	{
		if (PlayerService.CurrentSong.PictureMimeType != null)
		{
			<img src="@(QueryHelpers.AddQueryString(ApiPaths.GetImage, "fileName", FileParsingService.ParseImageFileName(PlayerService.CurrentSong)))" class="nowPlayingImage @_imageClass" @onclick="@(ShrinkToggle)" />
		}
		else
		{
			<div class="coverPlaceholder nowPlayingImage @_imageClass" @onclick="@(ShrinkToggle)"> </div>
		}
		<div class="songDetails @_titleClass">
			<h3 class="text-truncate d-block">@PlayerService.CurrentSong.Title</h3>
			<h4 class="text-truncate d-block">@PlayerService.CurrentSong.Artist - @PlayerService.CurrentSong.Album</h4>
		</div>
	}
</div>
<audio id="player" src="@_source"></audio>
<div class="container">
	<div class="row">
		<div class="col"><span id="queueButton" class="playerButton" data-bs-toggle="collapse" data-bs-target="#queueList" aria-expanded="true" aria-controls="queueList" title="Show queue"></span></div>
		<div class="col text-end"><span class="@_previousClass playerButton" @onclick="PlayPrevious"></span></div>
		<div class="col text-center"><span class="@_playClass playerButton" @onclick="PlayPause"></span></div>
		<div class="col"><span class="@_nextClass playerButton" @onclick="PlayNext"></span></div>
		<div class="col"></div>
	</div>
</div>

<div id="timeValues" class="mx-3">
	<span id="duration" class="float-end">0:00</span>
	<span id="currentTime">0:00</span>
	<input type="range" class="form-range" id="songRange" value="0" disabled="disabled">
</div>

<div id="queueList" class="container collapse" aria-labelledby="queueButton" data-bs-parent="#queueButton">
	@if (PlayerService.Queue != null && PlayerService.Queue.Count > 0)
	{
		<div class="my-3 text-end">
			<button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#convertModal" title="Save queue to new playlist">
				<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-plus" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
				</svg>
			</button>
		</div>

		<SongList Songs="_songList" WillClearQueueOnPlay="false" WillQueueListOnPlay="false" ShowSearch="false" />

		<div class="modal fade" id="convertModal" tabindex="-1" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="exampleModalLabel">Save queue to new playlist</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<div class="mb-3">
							<input type="text" class="form-control" @bind-value="_newPlaylistName" placeholder="Playlist name">
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-dark" data-bs-dismiss="modal" @onclick="SaveNewPlaylist">Create</button>
					</div>
				</div>
			</div>
		</div>
	}
	else
	{
		<div class="alert" role="alert">
			The queue is empty
		</div>
	}
</div>

@code
{
	private List<Song> _songList;
	private string _source;
	private string _imageClass;
	private string _titleClass;
	private string _nextClass;
	private string _previousClass;
	private string _playClass;
	private bool _isBig = false;
	private string _newPlaylistName;

	protected override void OnInitialized()
	{
		_imageClass = "";
		_previousClass = "previousButtonOff";
		_nextClass = "nextButtonOff";
		_playClass = "activePlayButtonOff";
		PlayerService.OnChange += async () =>
		{
			if (PlayerService.CurrentSong == null)
				_source = string.Empty;
			if (PlayerService.CurrentSong != null)
			{
				_source = await MusicService.GetSongUrl(PlayerService.CurrentSong.FileID);
				await MusicService.IncrementPlayCount(PlayerService.CurrentSong.FileID);
			}
			_previousClass = PlayerService.CurrentSong == null
							 || PlayerService.Queue.Count <= 1
							 || PlayerService.QueueIndex == 0
				? "previousButtonOff" : "previousButton";
			_nextClass = PlayerService.CurrentSong == null
						 || PlayerService.Queue.Count <= 1
						 || PlayerService.QueueIndex >= PlayerService.Queue.Count - 1
				? "nextButtonOff" : "nextButton";
			_playClass = PlayerService.Queue.Count == 0 ? "activePlayButtonOff" : "pauseButton";
			_songList = PlayerService.Queue;
			StateHasChanged();
		};

		_updateAction = UpdateMessage;
		_nextSongAction = PlayNext;
		_previousSongAction = PlayPrevious;
		_isPlayingAction = UpdatePlayerButton;
	}

	private void ShrinkToggle()
	{
		if (_isBig)
		{
			_imageClass = "";
			_titleClass = "";
		}
		else
		{
			_imageClass = "nowPlayingShrink";
			_titleClass = "songDetailsShrink";
		}
		_isBig = !_isBig;
	}

	private async Task PlayPause()
	{
		var isPlaying = await PlayerService.TogglePlayer();
		UpdatePlayerButton(isPlaying);
	}

	private void UpdatePlayerButton(bool isPlaying)
	{
		_playClass = isPlaying ? "pauseButton" : "activePlayButton";
		StateHasChanged();
	}

	private void PlayNext()
	{
		PlayerService.PlayNextSong();
	}

	private void PlayPrevious()
	{
		PlayerService.PlayPreviousSong();
	}

	private static Action _updateAction;
	private static Action _nextSongAction;
	private static Action _previousSongAction;
	private static Action<bool> _isPlayingAction;

	private void UpdateMessage()
	{
		PlayerService.PlayNextSong();
		_playClass = PlayerService.CurrentSong != null ? "pauseButton" : "activePlayButtonOff";
	}

	[JSInvokable]
	public static void IsPlaying(bool isPlaying)
	{
		_isPlayingAction.Invoke(isPlaying);
	}

	[JSInvokable]
	public static void SongEnded()
	{
		_updateAction.Invoke();
	}

	[JSInvokable]
	public static void SongNext()
	{
		_nextSongAction.Invoke();
	}

	[JSInvokable]
	public static void SongPrevious()
	{
		_previousSongAction.Invoke();
	}

	private async Task SaveNewPlaylist()
	{
		if (string.IsNullOrEmpty(_newPlaylistName))
			return;
		await PlaylistService.CreateNewPlaylistDefinition(_newPlaylistName, _songList);
		_newPlaylistName = string.Empty;
	}
}
